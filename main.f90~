!------------------------------------------------------------------------------------------------------
! DESCRIPTION:
! This program deal with "negative U Hubbard" model, with circular light shed on it. Originally, the  
! negative U hubbard model will lead to the S-wave pairing superconducting states at some particular  
! U value. After shed light on graphene, this U value might change. Our goal is to find out how the   
! light will affect the phase diagram of this model. We will first use an effective model to represent
! the circular light. 
! 
! AUTHOR:
! Luming   |   hiluming@gmail.com
!
! DATE:
! 2014-2-18
!------------------------------------------------------------------------------------------------------
 
MODULE sys_par
IMPLICIT NONE
SAVE
INTEGER,PARAMETER::n_lattice=100
INTEGER,PARAMETER::n_site=n_lattice*n_lattice
INTEGER,PARAMETER::double=8
REAL(KIND=double),PARAMETER::eps=1.e-6
REAL(KIND=double),PARAMETER::pi=3.141592653
REAL(KIND=double),DIMENSION(2),PARAMETER::delta1=(/ 0.5*SQRT(3.),0.5 /)  !nearste neighbour
REAL(KIND=double),DIMENSION(2),PARAMETER::delta2=(/ -0.5*SQRT(3.),0.5 /)
REAL(KIND=double),DIMENSION(2),PARAMETER::delta3=(/ 0,-1. /)
REAL(KIND=double),DIMENSION(2),PARAMETER::a1star=(/ 2*pi/SQRT(3.),-2*pi/3. /) !reciprotical vector
REAL(KIND=double),DIMENSION(2),PARAMETER::a2star=(/ 0,4*pi/3. /)           
REAL(KIND=double),DIMENSION(2),PARAMETER::d1=(/ SQRT(3.),0 /)             !next nearst neighbour
REAL(KIND=double),DIMENSION(2),PARAMETER::d2=(/ -SQRT(3.)/2.,-1.5 /)
REAL(KIND=double),DIMENSION(2),PARAMETER::d3=(/ -SQRT(3.)/2.,1.5 /)
END MODULE sys_parameters


PROGRAM graphene_light
USE sys_par
IMPLICIT NONE
REAL(KIND=double)::u_hub,ef,m_lit,delta_norm
DO u_hub=0,5,0.01
  CALL meanfield(u_hub,ef,m_lit,delta_norm)
  WRITE(*,*)u_hub,delta_norm
END DO
END PROGRAM graphene_light


SUBROUTINE meanfield(u_hub,ef,m_lit,delta_norm)
USE sys_par
IMPLICIT NONE
REAL(KIND=double),INTENT(IN)::u_hub,ef,m
REAL(KIND=double),INTENT(OUT)::delta_norm
REAL(KIND=double)::delta_norm1
DO
CALL findnext(u_hub,ef,m_lit,delta_norm,delta_norm1)
IF(ABS(delta_norm-delta_norm1)<eps) EXIT
delta_norm1=delta_norm
END DO
END SUBROUTINE meanfield


SUBROUTINE findnext(u_hub,ef,m_lit,delta_norm,delta_norm1)
USE sys_par
IMPLICIT NONE
REAL(KIND=double),INTENT(IN)::u_hub,ef,m_lit,delta_norm
REAL(KIND=double),INTENT(OUT)::delta_norm1
REAL(KIND=double),DIMENSION(2)::k_vec
REAL(KIND=double),DIMENSION(8)::ek,nrk
COMPLEX(KIND=double)::delta_a
INTEGER::h1,h2,i
COMPLEX(KIND=double),DIMENSION(8,8)::hk,x_mtx
delta_a=0
DO h1=1,n_lattice
  DO h2=1,n_lattice
     k_vec=h1/REAL(n_lattice)*a1star+h2/REAL(n_lattice)*a2star
     CALL writehk(u_hub,ef,m_lit,delta_norm,k_vec)
     CALL diag(hk,ek,x_mtx)
     DO i=1,8
        IF(ek(i)>ef) THEN
           nrk(i)=0
        ELSE
           nrk(i)=1
        END IF
        delta_a=delta_a+CONJG(x_mtx(6,i))*x_mtx(1,i)*nrk(i)
     END DO
  END DO
END DO
delta_norm1=ABS(delta_a)/REAL(n_site)
END SUBROUTINE findnext


SUBROUTINE writehk(u_hub,ef,m_lit,delta_norm,k_vec,hk)
USE sys_par
IMPLICIT NONE
REAL(KIND=double),INTENT(IN)::u_hub,ef,m_lit,delta_norm
REAL(KIND=double),DIMENSION(2),INTENT(IN)::k_vec
COMPLEX(KIND=double),DIMENSION(8,8),INTENT(OUT)::hk
COMPLEX(KIND=double)::tk
REAL(KIND=double)::tk_re,tk_im,mk

